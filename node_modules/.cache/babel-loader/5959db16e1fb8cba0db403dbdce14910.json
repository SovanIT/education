{"ast":null,"code":"import _classCallCheck from \"/home/trisys-it/education/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/trisys-it/education/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/trisys-it/education/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/trisys-it/education/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/trisys-it/education/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/home/trisys-it/education/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/home/trisys-it/education/src/components/timer.js\";\nimport React, { Component } from 'react';\n\nvar Timer =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Timer, _Component);\n\n  function Timer() {\n    var _this;\n\n    _classCallCheck(this, Timer);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Timer).call(this));\n    _this.state = {\n      time: {},\n      seconds: 5\n    };\n    _this.timer = 0;\n    _this.startTimer = _this.startTimer.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.countDown = _this.countDown.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(Timer, [{\n    key: \"secondsToTime\",\n    value: function secondsToTime(secs) {\n      var hours = Math.floor(secs / (60 * 60));\n      var divisor_for_minutes = secs % (60 * 60);\n      var minutes = Math.floor(divisor_for_minutes / 60);\n      var divisor_for_seconds = divisor_for_minutes % 60;\n      var seconds = Math.ceil(divisor_for_seconds);\n      var obj = {\n        \"h\": hours < 10 ? '0' + hours : hours,\n        \"m\": minutes < 10 ? '0' + minutes : minutes,\n        \"s\": seconds < 10 ? '0' + seconds : seconds\n      };\n      return obj;\n    }\n  }, {\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      var secs = this.props.seconds;\n      var timeLeftVar = this.secondsToTime(secs);\n      this.setState({\n        time: timeLeftVar,\n        seconds: secs\n      });\n      this.startTimer();\n    }\n  }, {\n    key: \"startTimer\",\n    value: function startTimer() {\n      if (this.timer === 0 && this.state.seconds > 0) {\n        this.timer = setInterval(this.countDown, 1000);\n      }\n    }\n  }, {\n    key: \"countDown\",\n    value: function countDown() {\n      // Remove one second, set state so a re-render happens.\n      var seconds = this.state.seconds - 1;\n      this.setState({\n        time: this.secondsToTime(seconds),\n        seconds: seconds\n      }); // Check if we're at zero.\n\n      if (seconds === 0) {\n        this.props.timeRemaining(this.state.seconds);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      }, \" Remaining Time:\\xA0\", this.state.time.m, \"m : \", this.state.time.s, \"s\");\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      clearInterval(this.timer);\n    }\n  }]);\n\n  return Timer;\n}(Component);\n\nexport { Timer as default };","map":{"version":3,"sources":["/home/trisys-it/education/src/components/timer.js"],"names":["React","Component","Timer","state","time","seconds","timer","startTimer","bind","countDown","secs","hours","Math","floor","divisor_for_minutes","minutes","divisor_for_seconds","ceil","obj","props","timeLeftVar","secondsToTime","setState","setInterval","timeRemaining","m","s","clearInterval"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;IACqBC,K;;;;;AACjB,mBAAc;AAAA;;AAAA;;AACV;AACA,UAAKC,KAAL,GAAa;AAAEC,MAAAA,IAAI,EAAE,EAAR;AAAYC,MAAAA,OAAO,EAAE;AAArB,KAAb;AACA,UAAKC,KAAL,GAAa,CAAb;AACA,UAAKC,UAAL,GAAkB,MAAKA,UAAL,CAAgBC,IAAhB,uDAAlB;AACA,UAAKC,SAAL,GAAiB,MAAKA,SAAL,CAAeD,IAAf,uDAAjB;AALU;AAMX;;;;kCAEaE,I,EAAK;AACjB,UAAIC,KAAK,GAAGC,IAAI,CAACC,KAAL,CAAWH,IAAI,IAAI,KAAK,EAAT,CAAf,CAAZ;AACA,UAAII,mBAAmB,GAAGJ,IAAI,IAAI,KAAK,EAAT,CAA9B;AACA,UAAIK,OAAO,GAAGH,IAAI,CAACC,KAAL,CAAWC,mBAAmB,GAAG,EAAjC,CAAd;AACA,UAAIE,mBAAmB,GAAGF,mBAAmB,GAAG,EAAhD;AACA,UAAIT,OAAO,GAAGO,IAAI,CAACK,IAAL,CAAUD,mBAAV,CAAd;AACA,UAAIE,GAAG,GAAG;AACR,aAAMP,KAAK,GAAG,EAAT,GAAgB,MAAMA,KAAtB,GAA8BA,KAD3B;AAER,aAAMI,OAAO,GAAG,EAAX,GAAiB,MAAMA,OAAvB,GAAiCA,OAF9B;AAGR,aAAMV,OAAO,GAAG,EAAX,GAAiB,MAAMA,OAAvB,GAAiCA;AAH9B,OAAV;AAKA,aAAOa,GAAP;AACD;;;yCAEoB;AACnB,UAAIR,IAAI,GAAG,KAAKS,KAAL,CAAWd,OAAtB;AACA,UAAIe,WAAW,GAAG,KAAKC,aAAL,CAAmBX,IAAnB,CAAlB;AACA,WAAKY,QAAL,CAAc;AAAElB,QAAAA,IAAI,EAAEgB,WAAR;AAAqBf,QAAAA,OAAO,EAAEK;AAA9B,OAAd;AACA,WAAKH,UAAL;AACD;;;iCAEY;AACX,UAAI,KAAKD,KAAL,KAAe,CAAf,IAAoB,KAAKH,KAAL,CAAWE,OAAX,GAAqB,CAA7C,EAAgD;AAC9C,aAAKC,KAAL,GAAaiB,WAAW,CAAC,KAAKd,SAAN,EAAiB,IAAjB,CAAxB;AACD;AACF;;;gCAEW;AACV;AACA,UAAIJ,OAAO,GAAG,KAAKF,KAAL,CAAWE,OAAX,GAAqB,CAAnC;AACA,WAAKiB,QAAL,CAAc;AACZlB,QAAAA,IAAI,EAAE,KAAKiB,aAAL,CAAmBhB,OAAnB,CADM;AAEZA,QAAAA,OAAO,EAAEA;AAFG,OAAd,EAHU,CAQV;;AACA,UAAIA,OAAO,KAAK,CAAhB,EAAmB;AACf,aAAKc,KAAL,CAAWK,aAAX,CAAyB,KAAKrB,KAAL,CAAWE,OAApC;AACH;AACF;;;6BAEQ;AACP,aACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCACG,KAAKF,KAAL,CAAWC,IAAX,CAAgBqB,CADnB,UAC0B,KAAKtB,KAAL,CAAWC,IAAX,CAAgBsB,CAD1C,MADF;AAKD;;;2CAEqB;AACpBC,MAAAA,aAAa,CAAC,KAAKrB,KAAN,CAAb;AACD;;;;EA5D4BL,S;;SAAdC,K","sourcesContent":["import React, { Component } from 'react'\nexport default class Timer extends Component {\n    constructor() {\n        super();\n        this.state = { time: {}, seconds: 5 };\n        this.timer = 0;\n        this.startTimer = this.startTimer.bind(this);\n        this.countDown = this.countDown.bind(this);\n      }\n    \n      secondsToTime(secs){\n        let hours = Math.floor(secs / (60 * 60));\n        let divisor_for_minutes = secs % (60 * 60);\n        let minutes = Math.floor(divisor_for_minutes / 60);\n        let divisor_for_seconds = divisor_for_minutes % 60;\n        let seconds = Math.ceil(divisor_for_seconds);\n        let obj = {\n          \"h\": (hours < 10 ) ? '0' + hours : hours,\n          \"m\": (minutes < 10) ? '0' + minutes : minutes,\n          \"s\": (seconds < 10) ? '0' + seconds : seconds\n        };\n        return obj;\n      }\n    \n      componentWillMount() {\n        let secs = this.props.seconds;\n        let timeLeftVar = this.secondsToTime(secs);\n        this.setState({ time: timeLeftVar, seconds: secs });\n        this.startTimer();\n      }\n    \n      startTimer() {\n        if (this.timer === 0 && this.state.seconds > 0) {\n          this.timer = setInterval(this.countDown, 1000);\n        }\n      }\n    \n      countDown() {\n        // Remove one second, set state so a re-render happens.\n        let seconds = this.state.seconds - 1;\n        this.setState({\n          time: this.secondsToTime(seconds),\n          seconds: seconds,\n        });\n        \n        // Check if we're at zero.\n        if (seconds === 0) { \n            this.props.timeRemaining(this.state.seconds);\n        }\n      }\n    \n      render() {\n        return(\n          <div> Remaining Time:&nbsp;\n            {this.state.time.m}m : {this.state.time.s}s\n          </div>\n        );\n      }\n\n      componentWillUnmount(){\n        clearInterval(this.timer);\n      }\n  }\n  "]},"metadata":{},"sourceType":"module"}